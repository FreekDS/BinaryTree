{"version":3,"sources":["config.js","tree-lib/BinaryTree.js","components/InputForm.js","components/TreeGraph.js","components/App.js","serviceWorker.js","index.js"],"names":["options","layout","hierarchical","direction","nodeSpacing","sortMethod","edges","color","nodes","shape","interaction","dragNodes","dragView","zoomView","height","physics","enabled","Node","value","parent","this","id","counter","left","right","item","i","isNaN","parseInt","charCodeAt","itemValue","thisValue","index","_convert","length","addRightChild","addLeftChild","_compareValues","_handleEqual","insert","isRoot","from","to","label","leftRes","toGraph","rightRes","InputForm","props","useState","BinaryTree","tree","onSubmit","e","event","preventDefault","target","test","toLowerCase","update","type","TreeGraph","representation","setRepresentation","network","setNetwork","newVal","setData","updateTrigger","graph","getNetwork","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88abbab7.chunk.js","sourcesContent":["export const options = {\r\n    layout: {\r\n        hierarchical: {\r\n            direction: 'UD',\r\n            nodeSpacing: 150,\r\n            sortMethod : 'directed'\r\n        }\r\n    },\r\n    edges: {\r\n        color: \"#000000\"\r\n    },\r\n    nodes: {\r\n        shape: \"ellipse\"\r\n    },\r\n    interaction: {\r\n        dragNodes: false,\r\n        dragView: true,\r\n        zoomView: true\r\n    },\r\n    height: \"800px\",\r\n    physics: {\r\n        enabled: false\r\n    }\r\n};\r\n\r\n","import {options} from \"../config\";\r\n\r\nclass Node {\r\n    static counter = 0;\r\n\r\n    constructor(value, parent = null) {\r\n        this.id = Node.counter;\r\n        Node.counter++;\r\n\r\n        this.parent = parent;\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n    _convert(item, i = 0) {\r\n        return isNaN(item) ? parseInt(item.charCodeAt(i), 10) : parseInt(item, 10);\r\n    }\r\n\r\n    _handleEqual(item, itemValue, thisValue) {\r\n        if (isNaN(item)) {\r\n            let index = 1;\r\n            while (itemValue === thisValue) {\r\n                itemValue = this._convert(item, index);\r\n                thisValue = this._convert(this.value, index);\r\n                index++;\r\n\r\n                if (index >= this.value.length) {\r\n                    this.addRightChild(item);\r\n                    return;\r\n                }\r\n                if (index >= item.length) {\r\n                    this.addLeftChild(item);\r\n                    return;\r\n                }\r\n            }\r\n            if (itemValue === thisValue) {\r\n                this.addLeftChild(item)\r\n            } else {\r\n                this._compareValues(item, itemValue, thisValue);\r\n            }\r\n\r\n        } else {\r\n            // same number, insert at left child\r\n            this.addLeftChild(item)\r\n        }\r\n    }\r\n\r\n    _compareValues(item, itemValue, thisValue) {\r\n        if (itemValue < thisValue) {\r\n            this.addLeftChild(item)\r\n        } else if (itemValue > thisValue) {\r\n            this.addRightChild(item)\r\n        } else {\r\n            // special case for equality\r\n            this._handleEqual(item, itemValue, thisValue);\r\n        }\r\n    }\r\n\r\n    addLeftChild(item) {\r\n        this.left ? this.left.insert(item) : this.left = new Node(item, this);\r\n    }\r\n\r\n    addRightChild(item) {\r\n        this.right ? this.right.insert(item) : this.right = new Node(item, this);\r\n    }\r\n\r\n    insert(item) {\r\n        let itemValue = this._convert(item);\r\n        if (this.value) {\r\n            let thisValue = this._convert(this.value);\r\n            this._compareValues(item, itemValue, thisValue)\r\n        } else {\r\n            this.value = item;\r\n        }\r\n    }\r\n\r\n    toGraph(isRoot = true) {\r\n        let edges = this.parent ?\r\n            [\r\n                {\r\n                    from: this.parent.id,\r\n                    to: this.id\r\n                }\r\n            ] : [];\r\n        let nodes = this.value ?\r\n            [\r\n                {\r\n                    id: this.id,\r\n                    label: this.value,\r\n                    shape: isRoot? \"box\" : options.nodes.shape\r\n                }\r\n            ] : [];\r\n        if (this.left) {\r\n            let leftRes = this.left.toGraph(false);\r\n            edges = [...edges, ...leftRes.edges];\r\n            nodes = [...nodes, ...leftRes.nodes];\r\n        }\r\n        if (this.right) {\r\n            let rightRes = this.right.toGraph(false);\r\n            edges = [...edges, ...rightRes.edges];\r\n            nodes = [...nodes, ...rightRes.nodes];\r\n        }\r\n\r\n        return {\r\n            nodes,\r\n            edges\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {Node as BinaryTree};\r\n","import React, {useState} from \"react\";\r\nimport {BinaryTree} from \"../tree-lib/BinaryTree\";\r\n\r\n\r\nconst InputForm = (props) => {\r\n\r\n    let [tree] = useState(new BinaryTree(null));\r\n\r\n    const handleInput = (event) => {\r\n        event.preventDefault();\r\n        tree.insert(event.target.test.value.toLowerCase());\r\n        event.target.test.value = '';\r\n        props.update(tree.toGraph());\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={e => handleInput(e)}>\r\n                <label>\r\n                    Enter name or number\r\n                    <input id=\"test\" type={\"text\"}/>\r\n                </label>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {InputForm}\r\n","import React, {useState} from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport {InputForm} from \"./InputForm\";\r\n\r\n\r\nlet TreeGraph = (props) => {\r\n\r\n    let [representation, setRepresentation] = useState({\r\n        edges: [],\r\n        nodes: []\r\n    });\r\n    let [network, setNetwork] = useState(null);\r\n\r\n    const update = (newVal) => {\r\n        setRepresentation(newVal);\r\n        if (network) {\r\n            network.setData(newVal)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <InputForm update={update}/>\r\n            <Graph\r\n                options={props.options}\r\n                updateTrigger={representation}\r\n                graph={{edges: [], nodes: []}}\r\n                getNetwork={network => {\r\n                    setNetwork(network)\r\n                }}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport {TreeGraph}\r\n","import React from 'react';\nimport '../style/App.css';\nimport {options} from '../config'\nimport {TreeGraph} from \"./TreeGraph\";\n\n\nfunction App() {\n\n    return (\n        <div>\n            <TreeGraph options={options}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}