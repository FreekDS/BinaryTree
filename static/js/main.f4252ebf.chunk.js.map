{"version":3,"sources":["style/assets/logo-UA.jpg","config.js","components/InputForm.js","tree-lib/BinaryTree.js","components/Icons.js","components/TreeGraph.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","options","layout","hierarchical","direction","nodeSpacing","sortMethod","edges","color","width","nodes","shape","interaction","dragNodes","dragView","zoomView","height","window","innerHeight","physics","enabled","InputForm","props","tree","useState","setEnabled","className","Form","onSubmit","e","event","preventDefault","insert","target","input","value","toLowerCase","update","toGraph","FormLabel","htmlFor","Row","Col","type","id","placeholder","onChange","console","log","length","disabled","Node","parent","this","counter","left","right","item","i","isNaN","parseInt","charCodeAt","itemValue","thisValue","index","_convert","addRightChild","addLeftChild","_compareValues","_handleEqual","isRoot","from","to","label","leftRes","rightRes","IconTrash","Fragment","viewBox","fill","xmlns","fillRule","d","clipRule","TreeGraph","defaultTree","BinaryTree","setTree","representation","setRepresentation","network","setNetwork","divElement","setDiv","handleResize","useCallback","newOptions","clientHeight","setOptions","fit","useEffect","addEventListener","newVal","setData","md","onClick","style","ref","updateTrigger","graph","getNetwork","App","Navbar","bg","variant","NavbarBrand","href","aria-label","Container","fluid","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4252ebf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-UA.024572bb.jpg\";","export const options = {\n    layout: {\n        hierarchical: {\n            direction: 'UD',\n            nodeSpacing: 150,\n            sortMethod : 'directed'\n        }\n    },\n    edges: {\n        color: \"#000000\",\n        width: 2\n    },\n    nodes: {\n        shape: \"ellipse\"\n    },\n    interaction: {\n        dragNodes: false,\n        dragView: true,\n        zoomView: true\n    },\n    height: `${window.innerHeight}px`,\n    physics: {\n        enabled: false\n    }\n};\n\n","import React, {useState} from \"react\";\nimport Form from 'react-bootstrap/Form'\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport '../style/treeForm.css'\nimport Col from \"react-bootstrap/Col\";\n\n\nconst InputForm = (props) => {\n\n    let {tree} = props;\n    let [enabled, setEnabled] = useState(false);\n\n    const handleInput = (event) => {\n        event.preventDefault();\n        tree.insert(event.target.input.value.toLowerCase());\n        event.target.input.value = '';\n        props.update(tree.toGraph());\n        setEnabled(false);\n    };\n\n    const handleChange = (event) => {\n        event.preventDefault();\n        console.log(event.target);\n        let value = event.target.value.toLowerCase();\n        setEnabled(value.length !== 0);\n    };\n\n    return (\n        <div className={\"pt-5\"}>\n            <Form onSubmit={e => handleInput(e)}>\n                <FormLabel htmlFor={\"input\"}>Enter name or number</FormLabel>\n                <Form.Row>\n                    <Col>\n                        <input\n                            className={\"form-control\"}\n                            type={\"text\"} id=\"input\"\n                            placeholder={\"ex. 10 or Bart\"}\n                            onChange={handleChange}\n                        />\n                    </Col>\n                    <Col>\n                        <input type={\"submit\"} className={\"btn btn-primary add-btn\"} value={\"add\"} disabled={!enabled}/>\n                    </Col>\n                </Form.Row>\n            </Form>\n        </div>\n    );\n};\n\nexport {InputForm}\n","import {options} from \"../config\";\n\nclass Node {\n    static counter = 0;\n\n    constructor(value, parent = null) {\n        this.id = Node.counter;\n        Node.counter++;\n\n        this.parent = parent;\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n\n    _convert(item, i = 0) {\n        return isNaN(item) ? parseInt(item.charCodeAt(i), 10) : parseInt(item, 10);\n    }\n\n    _handleEqual(item, itemValue, thisValue) {\n        if (isNaN(item)) {\n            let index = 1;\n            while (itemValue === thisValue) {\n                itemValue = this._convert(item, index);\n                thisValue = this._convert(this.value, index);\n                index++;\n\n                if (index >= this.value.length) {\n                    this.addRightChild(item);\n                    return;\n                }\n                if (index >= item.length) {\n                    this.addLeftChild(item);\n                    return;\n                }\n            }\n            if (itemValue === thisValue) {\n                this.addLeftChild(item)\n            } else {\n                this._compareValues(item, itemValue, thisValue);\n            }\n\n        } else {\n            // same number, insert at left child\n            this.addLeftChild(item)\n        }\n    }\n\n    _compareValues(item, itemValue, thisValue) {\n        if (itemValue < thisValue) {\n            this.addLeftChild(item)\n        } else if (itemValue > thisValue) {\n            this.addRightChild(item)\n        } else {\n            // special case for equality\n            this._handleEqual(item, itemValue, thisValue);\n        }\n    }\n\n    addLeftChild(item) {\n        this.left ? this.left.insert(item) : this.left = new Node(item, this);\n    }\n\n    addRightChild(item) {\n        this.right ? this.right.insert(item) : this.right = new Node(item, this);\n    }\n\n    insert(item) {\n        let itemValue = this._convert(item);\n        if (this.value) {\n            let thisValue = this._convert(this.value);\n            this._compareValues(item, itemValue, thisValue)\n        } else {\n            this.value = item;\n        }\n    }\n\n    toGraph(isRoot = true) {\n        let edges = this.parent ?\n            [\n                {\n                    from: this.parent.id,\n                    to: this.id\n                }\n            ] : [];\n        let nodes = this.value ?\n            [\n                {\n                    id: this.id,\n                    label: this.value,\n                    shape: isRoot? \"box\" : options.nodes.shape\n                }\n            ] : [];\n        if (this.left) {\n            let leftRes = this.left.toGraph(false);\n            edges = [...edges, ...leftRes.edges];\n            nodes = [...nodes, ...leftRes.nodes];\n        }\n        if (this.right) {\n            let rightRes = this.right.toGraph(false);\n            edges = [...edges, ...rightRes.edges];\n            nodes = [...nodes, ...rightRes.nodes];\n        }\n\n        return {\n            nodes,\n            edges\n        }\n    }\n\n}\n\nexport {Node as BinaryTree};\n","import React from \"react\";\n\n\nconst IconTrash = () => {\n    return (\n        <React.Fragment>\n            <svg className=\"bi bi-trash-fill\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\n                 fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fillRule=\"evenodd\"\n                      d=\"M2.5 1a1 1 0 00-1 1v1a1 1 0 001 1H3v9a2 2 0 002 2h6a2 2 0 002-2V4h.5a1 1 0 001-1V2a1 1 0 00-1-1H10a1 1 0 00-1-1H7a1 1 0 00-1 1H2.5zm3 4a.5.5 0 01.5.5v7a.5.5 0 01-1 0v-7a.5.5 0 01.5-.5zM8 5a.5.5 0 01.5.5v7a.5.5 0 01-1 0v-7A.5.5 0 018 5zm3 .5a.5.5 0 00-1 0v7a.5.5 0 001 0v-7z\"\n                      clipRule=\"evenodd\"/>\n            </svg>\n            &nbsp;\n        </React.Fragment>\n    );\n};\n\nexport {IconTrash}\n","import React, {useCallback, useEffect, useState} from \"react\";\nimport Graph from \"react-graph-vis\";\nimport {InputForm} from \"./InputForm\";\nimport {BinaryTree} from \"../tree-lib/BinaryTree\";\nimport Col from \"react-bootstrap/Col\";\nimport {options} from \"../config\";\nimport Row from \"react-bootstrap/Row\";\nimport {IconTrash} from \"./Icons\";\n\nlet TreeGraph = (props) => {\n\n    const defaultTree = {\n        edges: [],\n        nodes: []\n    };\n\n    let [tree, setTree] = useState(new BinaryTree(null));\n\n    let [representation, setRepresentation] = useState({\n        edges: [],\n        nodes: []\n    });\n    let [network, setNetwork] = useState(null);\n    let [divElement, setDiv] = useState(null);\n\n    let handleResize = useCallback(() => {\n        if (network) {\n            let newOptions = options;\n            newOptions.height = `${divElement.clientHeight}px`;\n            network.setOptions(newOptions);\n            network.fit();\n        }\n    }, [network, divElement]);\n\n\n    useEffect(() => {\n        window.addEventListener('resize', handleResize);\n    });\n\n    useEffect(() => {\n        handleResize();\n    });\n\n    const update = (newVal) => {\n        setRepresentation(newVal);\n        if (network) {\n            network.setData(newVal);\n        }\n    };\n\n    const clear = () => {\n        update(defaultTree);\n        setTree(new BinaryTree(null));\n    };\n\n    return (\n        <React.Fragment>\n            <Col md={4} className={\"mb-2\"}>\n                <InputForm update={update} tree={tree}/>\n                <Row className={\"mt-3\"}>\n                    <Col>\n                        <button className={\"btn btn-danger\"} onClick={() => {\n                            clear()\n                        }}>\n                            <IconTrash/>\n                            Clear tree\n                        </button>\n                    </Col>\n                </Row>\n            </Col>\n            <Col>\n                <div style={{height: '80vh'}}\n                     ref={(divElement) => {\n                         setDiv(divElement)\n                     }}\n                     className={\"border border-dark\"}>\n                    <Graph\n                        options={props.options}\n                        updateTrigger={representation}\n                        graph={{edges: [], nodes: []}}\n                        getNetwork={network => {\n                            setNetwork(network)\n                        }}/>\n                </div>\n            </Col>\n        </React.Fragment>\n    );\n};\n\n\nexport {TreeGraph}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {options} from '../config'\nimport {TreeGraph} from \"./TreeGraph\";\n\nimport logo from '../style/assets/logo-UA.jpg'\n\nimport GitHubButton from 'react-github-btn'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Navbar from \"react-bootstrap/Navbar\";\nimport NavbarBrand from \"react-bootstrap/NavbarBrand\";\n\nfunction App() {\n\n    return (\n\n        <React.Fragment>\n            <Navbar bg={\"dark\"} variant={\"dark\"}>\n                <NavbarBrand>\n                    Binary Tree Visualizer\n                </NavbarBrand>\n                <div className={\"ml-auto mt-2\"}>\n                    <GitHubButton href=\"https://github.com/FreekDS/BinaryTree/\"\n                                  aria-label=\"Watch FreekDS/BinaryTree on GitHub\">Source code</GitHubButton>\n                </div>\n            </Navbar>\n\n            <Container fluid className={\"h-100\"}>\n                <Row className={\"mt-2 mb-1\"}>\n                    <TreeGraph options={options}/>\n                </Row>\n                <Row className={\"mt-1 d-flex justify-content-end mr-1\"}>\n                    <img src={logo} alt={\"UA logo\"} width={\"4%\"}/>\n                </Row>\n            </Container>\n\n\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}