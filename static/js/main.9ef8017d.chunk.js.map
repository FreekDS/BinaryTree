{"version":3,"sources":["config.js","components/InputForm.js","tree-lib/BinaryTree.js","components/TreeGraph.js","components/App.js","serviceWorker.js","index.js"],"names":["options","layout","hierarchical","direction","nodeSpacing","sortMethod","edges","color","width","nodes","shape","interaction","dragNodes","dragView","zoomView","height","physics","enabled","InputForm","props","tree","useState","setEnabled","Form","onSubmit","e","event","preventDefault","insert","target","input","value","toLowerCase","update","toGraph","FormGroup","FormLabel","htmlFor","className","type","id","placeholder","onChange","console","log","length","disabled","Node","parent","this","counter","left","right","item","i","isNaN","parseInt","charCodeAt","itemValue","thisValue","index","_convert","addRightChild","addLeftChild","_compareValues","_handleEqual","isRoot","from","to","label","leftRes","rightRes","TreeGraph","defaultTree","BinaryTree","setTree","representation","setRepresentation","network","setNetwork","newVal","setData","onClick","updateTrigger","graph","getNetwork","App","Container","fluid","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAAaA,G,qBAAU,CACnBC,OAAQ,CACJC,aAAc,CACVC,UAAW,KACXC,YAAa,IACbC,WAAa,aAGrBC,MAAO,CACHC,MAAO,UACPC,MAAO,GAEXC,MAAO,CACHC,MAAO,WAEXC,YAAa,CACTC,WAAW,EACXC,UAAU,EACVC,UAAU,GAEdC,OAAQ,QACRC,QAAS,CACLC,SAAS,K,mDChBXC,EAAY,SAACC,GAAW,IAErBC,EAAQD,EAARC,KAFoB,EAGGC,oBAAS,GAHZ,mBAGpBJ,EAHoB,KAGXK,EAHW,KAoBzB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,SAAU,SAAAC,GAAC,OAjBJC,EAiBoBD,GAhB/BE,iBACNP,EAAKQ,OAAOF,EAAMG,OAAOC,MAAMC,MAAMC,eACrCN,EAAMG,OAAOC,MAAMC,MAAQ,GAC3BZ,EAAMc,OAAOb,EAAKc,gBAClBZ,GAAW,GALK,IAACI,IAkBT,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,QAAS,SAApB,wBACA,2BACIC,UAAW,eACXC,KAAM,OAAQC,GAAG,QACjBC,YAAa,iBACbC,SAhBC,SAAChB,GAClBA,EAAMC,iBACNgB,QAAQC,IAAIlB,EAAMG,QAClB,IAAIE,EAAQL,EAAMG,OAAOE,MAAMC,cAC/BV,EAA4B,IAAjBS,EAAMc,WAcL,2BAAON,KAAM,SAAUD,UAAW,kBAAmBP,MAAO,MAAOe,UAAW7B,Q,0BCnC5F8B,E,WAGF,WAAYhB,GAAuB,IAAhBiB,EAAe,uDAAN,KAAM,oBAC9BC,KAAKT,GAAKO,EAAKG,QACfH,EAAKG,UAELD,KAAKD,OAASA,EACdC,KAAKlB,MAAQA,EACbkB,KAAKE,KAAO,KACZF,KAAKG,MAAQ,K,qDAGRC,GAAc,IAARC,EAAO,uDAAH,EACf,OAAOC,MAAMF,GAAQG,SAASH,EAAKI,WAAWH,GAAI,IAAME,SAASH,EAAM,M,mCAG9DA,EAAMK,EAAWC,GAC1B,GAAIJ,MAAMF,GAAO,CAEb,IADA,IAAIO,EAAQ,EACLF,IAAcC,GAAW,CAK5B,GAJAD,EAAYT,KAAKY,SAASR,EAAMO,GAChCD,EAAYV,KAAKY,SAASZ,KAAKlB,MAAO6B,KACtCA,GAEaX,KAAKlB,MAAMc,OAEpB,YADAI,KAAKa,cAAcT,GAGvB,GAAIO,GAASP,EAAKR,OAEd,YADAI,KAAKc,aAAaV,GAItBK,IAAcC,EACdV,KAAKc,aAAaV,GAElBJ,KAAKe,eAAeX,EAAMK,EAAWC,QAKzCV,KAAKc,aAAaV,K,qCAIXA,EAAMK,EAAWC,GACxBD,EAAYC,EACZV,KAAKc,aAAaV,GACXK,EAAYC,EACnBV,KAAKa,cAAcT,GAGnBJ,KAAKgB,aAAaZ,EAAMK,EAAWC,K,mCAI9BN,GACTJ,KAAKE,KAAOF,KAAKE,KAAKvB,OAAOyB,GAAQJ,KAAKE,KAAO,IAAIJ,EAAKM,EAAMJ,Q,oCAGtDI,GACVJ,KAAKG,MAAQH,KAAKG,MAAMxB,OAAOyB,GAAQJ,KAAKG,MAAQ,IAAIL,EAAKM,EAAMJ,Q,6BAGhEI,GACH,IAAIK,EAAYT,KAAKY,SAASR,GAC9B,GAAIJ,KAAKlB,MAAO,CACZ,IAAI4B,EAAYV,KAAKY,SAASZ,KAAKlB,OACnCkB,KAAKe,eAAeX,EAAMK,EAAWC,QAErCV,KAAKlB,MAAQsB,I,gCAIG,IAAhBa,IAAe,yDACf5D,EAAQ2C,KAAKD,OACb,CACI,CACImB,KAAMlB,KAAKD,OAAOR,GAClB4B,GAAInB,KAAKT,KAEb,GACJ/B,EAAQwC,KAAKlB,MACb,CACI,CACIS,GAAIS,KAAKT,GACT6B,MAAOpB,KAAKlB,MACZrB,MAAOwD,EAAQ,MAAQlE,EAAQS,MAAMC,QAEzC,GACR,GAAIuC,KAAKE,KAAM,CACX,IAAImB,EAAUrB,KAAKE,KAAKjB,SAAQ,GAChC5B,EAAK,sBAAOA,GAAP,YAAiBgE,EAAQhE,QAC9BG,EAAK,sBAAOA,GAAP,YAAiB6D,EAAQ7D,QAElC,GAAIwC,KAAKG,MAAO,CACZ,IAAImB,EAAWtB,KAAKG,MAAMlB,SAAQ,GAClC5B,EAAK,sBAAOA,GAAP,YAAiBiE,EAASjE,QAC/BG,EAAK,sBAAOA,GAAP,YAAiB8D,EAAS9D,QAGnC,MAAO,CACHA,QACAH,a,KAxGNyC,EACKG,QAAU,ECErB,IAAIsB,EAAY,SAACrD,GAEb,IAAMsD,EAAc,CAChBnE,MAAO,GACPG,MAAO,IAJY,EAODY,mBAAS,IAAIqD,EAAW,OAPvB,mBAOlBtD,EAPkB,KAOZuD,EAPY,OASmBtD,mBAAS,CAC/Cf,MAAO,GACPG,MAAO,KAXY,mBASlBmE,EATkB,KASFC,EATE,OAaKxD,mBAAS,MAbd,mBAalByD,EAbkB,KAaTC,EAbS,KAejB9C,EAAS,SAAC+C,GACZH,EAAkBG,GACdF,GACAA,EAAQG,QAAQD,IASxB,OACI,6BACI,kBAAC,EAAD,CAAW/C,OAAQA,EAAQb,KAAMA,IACjC,4BAAQkB,UAAW,kBAAmB4C,QAAS,WAPnDjD,EAAOwC,GACPE,EAAQ,IAAID,EAAW,SAMnB,cACA,kBAAC,IAAD,CACI1E,QAASmB,EAAMnB,QACfmF,cAAeP,EACfQ,MAAO,CAAC9E,MAAO,GAAIG,MAAO,IAC1B4E,WAAY,SAAAP,GACRC,EAAWD,Q,0BCjBhBQ,MAdf,WAEI,OACI,kBAACC,EAAA,EAAD,CAAWC,MAAO,MACd,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CAAW1F,QAASA,QCJpB2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.9ef8017d.chunk.js","sourcesContent":["export const options = {\r\n    layout: {\r\n        hierarchical: {\r\n            direction: 'UD',\r\n            nodeSpacing: 150,\r\n            sortMethod : 'directed'\r\n        }\r\n    },\r\n    edges: {\r\n        color: \"#000000\",\r\n        width: 2\r\n    },\r\n    nodes: {\r\n        shape: \"ellipse\"\r\n    },\r\n    interaction: {\r\n        dragNodes: false,\r\n        dragView: true,\r\n        zoomView: true\r\n    },\r\n    height: \"800px\",\r\n    physics: {\r\n        enabled: false\r\n    }\r\n};\r\n\r\n","import React, {useState} from \"react\";\r\nimport Form from 'react-bootstrap/Form'\r\nimport FormLabel from \"react-bootstrap/FormLabel\";\r\nimport FormGroup from \"react-bootstrap/FormGroup\";\r\n\r\n\r\nconst InputForm = (props) => {\r\n\r\n    let {tree} = props;\r\n    let [enabled, setEnabled] = useState(false);\r\n\r\n    const handleInput = (event) => {\r\n        event.preventDefault();\r\n        tree.insert(event.target.input.value.toLowerCase());\r\n        event.target.input.value = '';\r\n        props.update(tree.toGraph());\r\n        setEnabled(false);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        event.preventDefault();\r\n        console.log(event.target);\r\n        let value = event.target.value.toLowerCase();\r\n        setEnabled(value.length !== 0);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form onSubmit={e => handleInput(e)}>\r\n                <FormGroup>\r\n                    <FormLabel htmlFor={\"input\"}>Enter name or number</FormLabel>\r\n                    <input\r\n                        className={\"form-control\"}\r\n                        type={\"text\"} id=\"input\"\r\n                        placeholder={\"ex. 10 or Bart\"}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <input type={\"submit\"} className={\"btn btn-primary\"} value={\"add\"} disabled={!enabled} />\r\n                </FormGroup>\r\n            </Form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {InputForm}\r\n","import {options} from \"../config\";\r\n\r\nclass Node {\r\n    static counter = 0;\r\n\r\n    constructor(value, parent = null) {\r\n        this.id = Node.counter;\r\n        Node.counter++;\r\n\r\n        this.parent = parent;\r\n        this.value = value;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n\r\n    _convert(item, i = 0) {\r\n        return isNaN(item) ? parseInt(item.charCodeAt(i), 10) : parseInt(item, 10);\r\n    }\r\n\r\n    _handleEqual(item, itemValue, thisValue) {\r\n        if (isNaN(item)) {\r\n            let index = 1;\r\n            while (itemValue === thisValue) {\r\n                itemValue = this._convert(item, index);\r\n                thisValue = this._convert(this.value, index);\r\n                index++;\r\n\r\n                if (index >= this.value.length) {\r\n                    this.addRightChild(item);\r\n                    return;\r\n                }\r\n                if (index >= item.length) {\r\n                    this.addLeftChild(item);\r\n                    return;\r\n                }\r\n            }\r\n            if (itemValue === thisValue) {\r\n                this.addLeftChild(item)\r\n            } else {\r\n                this._compareValues(item, itemValue, thisValue);\r\n            }\r\n\r\n        } else {\r\n            // same number, insert at left child\r\n            this.addLeftChild(item)\r\n        }\r\n    }\r\n\r\n    _compareValues(item, itemValue, thisValue) {\r\n        if (itemValue < thisValue) {\r\n            this.addLeftChild(item)\r\n        } else if (itemValue > thisValue) {\r\n            this.addRightChild(item)\r\n        } else {\r\n            // special case for equality\r\n            this._handleEqual(item, itemValue, thisValue);\r\n        }\r\n    }\r\n\r\n    addLeftChild(item) {\r\n        this.left ? this.left.insert(item) : this.left = new Node(item, this);\r\n    }\r\n\r\n    addRightChild(item) {\r\n        this.right ? this.right.insert(item) : this.right = new Node(item, this);\r\n    }\r\n\r\n    insert(item) {\r\n        let itemValue = this._convert(item);\r\n        if (this.value) {\r\n            let thisValue = this._convert(this.value);\r\n            this._compareValues(item, itemValue, thisValue)\r\n        } else {\r\n            this.value = item;\r\n        }\r\n    }\r\n\r\n    toGraph(isRoot = true) {\r\n        let edges = this.parent ?\r\n            [\r\n                {\r\n                    from: this.parent.id,\r\n                    to: this.id\r\n                }\r\n            ] : [];\r\n        let nodes = this.value ?\r\n            [\r\n                {\r\n                    id: this.id,\r\n                    label: this.value,\r\n                    shape: isRoot? \"box\" : options.nodes.shape\r\n                }\r\n            ] : [];\r\n        if (this.left) {\r\n            let leftRes = this.left.toGraph(false);\r\n            edges = [...edges, ...leftRes.edges];\r\n            nodes = [...nodes, ...leftRes.nodes];\r\n        }\r\n        if (this.right) {\r\n            let rightRes = this.right.toGraph(false);\r\n            edges = [...edges, ...rightRes.edges];\r\n            nodes = [...nodes, ...rightRes.nodes];\r\n        }\r\n\r\n        return {\r\n            nodes,\r\n            edges\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport {Node as BinaryTree};\r\n","import React, {useState} from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport {InputForm} from \"./InputForm\";\r\nimport {BinaryTree} from \"../tree-lib/BinaryTree\";\r\n\r\nlet TreeGraph = (props) => {\r\n\r\n    const defaultTree = {\r\n        edges: [],\r\n        nodes: []\r\n    };\r\n\r\n    let [tree, setTree] = useState(new BinaryTree(null));\r\n\r\n    let [representation, setRepresentation] = useState({\r\n        edges: [],\r\n        nodes: []\r\n    });\r\n    let [network, setNetwork] = useState(null);\r\n\r\n    const update = (newVal) => {\r\n        setRepresentation(newVal);\r\n        if (network) {\r\n            network.setData(newVal)\r\n        }\r\n    };\r\n\r\n    const clear = () => {\r\n        update(defaultTree);\r\n        setTree(new BinaryTree(null));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <InputForm update={update} tree={tree}/>\r\n            <button className={\"btn btn-primary\"} onClick={()=> {clear()}}>Clear tree</button>\r\n            <Graph\r\n                options={props.options}\r\n                updateTrigger={representation}\r\n                graph={{edges: [], nodes: []}}\r\n                getNetwork={network => {\r\n                    setNetwork(network)\r\n                }}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport {TreeGraph}\r\n","import React from 'react';\nimport '../style/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {options} from '../config'\nimport {TreeGraph} from \"./TreeGraph\";\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction App() {\n\n    return (\n        <Container fluid={\"md\"}>\n            <Row>\n                <Col>\n                    <TreeGraph options={options}/>\n                </Col>\n\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}