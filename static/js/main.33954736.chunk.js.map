{"version":3,"sources":["config.js","components/InputForm.js","tree-lib/BinaryTree.js","components/TreeGraph.js","components/App.js","serviceWorker.js","index.js"],"names":["options","layout","hierarchical","direction","nodeSpacing","sortMethod","edges","color","width","nodes","shape","interaction","dragNodes","dragView","zoomView","height","physics","enabled","InputForm","props","tree","onSubmit","e","event","preventDefault","insert","target","test","value","toLowerCase","update","toGraph","id","type","Node","parent","this","counter","left","right","item","i","isNaN","parseInt","charCodeAt","itemValue","thisValue","index","_convert","length","addRightChild","addLeftChild","_compareValues","_handleEqual","isRoot","from","to","label","leftRes","rightRes","TreeGraph","defaultTree","useState","BinaryTree","setTree","representation","setRepresentation","network","setNetwork","newVal","setData","onClick","updateTrigger","graph","getNetwork","App","Container","fluid","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33954736.chunk.js","sourcesContent":["export const options = {\n    layout: {\n        hierarchical: {\n            direction: 'UD',\n            nodeSpacing: 150,\n            sortMethod : 'directed'\n        }\n    },\n    edges: {\n        color: \"#000000\",\n        width: 2\n    },\n    nodes: {\n        shape: \"ellipse\"\n    },\n    interaction: {\n        dragNodes: false,\n        dragView: true,\n        zoomView: true\n    },\n    height: \"800px\",\n    physics: {\n        enabled: false\n    }\n};\n\n","import React from \"react\";\n\n\nconst InputForm = (props) => {\n\n    let {tree} = props;\n\n    const handleInput = (event) => {\n        event.preventDefault();\n        tree.insert(event.target.test.value.toLowerCase());\n        event.target.test.value = '';\n        props.update(tree.toGraph());\n    };\n\n    return (\n        <div>\n            <form onSubmit={e => handleInput(e)}>\n                <label>\n                    Enter name or number\n                    <input id=\"test\" type={\"text\"}/>\n                </label>\n            </form>\n        </div>\n    );\n};\n\nexport {InputForm}\n","import {options} from \"../config\";\n\nclass Node {\n    static counter = 0;\n\n    constructor(value, parent = null) {\n        this.id = Node.counter;\n        Node.counter++;\n\n        this.parent = parent;\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n\n    _convert(item, i = 0) {\n        return isNaN(item) ? parseInt(item.charCodeAt(i), 10) : parseInt(item, 10);\n    }\n\n    _handleEqual(item, itemValue, thisValue) {\n        if (isNaN(item)) {\n            let index = 1;\n            while (itemValue === thisValue) {\n                itemValue = this._convert(item, index);\n                thisValue = this._convert(this.value, index);\n                index++;\n\n                if (index >= this.value.length) {\n                    this.addRightChild(item);\n                    return;\n                }\n                if (index >= item.length) {\n                    this.addLeftChild(item);\n                    return;\n                }\n            }\n            if (itemValue === thisValue) {\n                this.addLeftChild(item)\n            } else {\n                this._compareValues(item, itemValue, thisValue);\n            }\n\n        } else {\n            // same number, insert at left child\n            this.addLeftChild(item)\n        }\n    }\n\n    _compareValues(item, itemValue, thisValue) {\n        if (itemValue < thisValue) {\n            this.addLeftChild(item)\n        } else if (itemValue > thisValue) {\n            this.addRightChild(item)\n        } else {\n            // special case for equality\n            this._handleEqual(item, itemValue, thisValue);\n        }\n    }\n\n    addLeftChild(item) {\n        this.left ? this.left.insert(item) : this.left = new Node(item, this);\n    }\n\n    addRightChild(item) {\n        this.right ? this.right.insert(item) : this.right = new Node(item, this);\n    }\n\n    insert(item) {\n        let itemValue = this._convert(item);\n        if (this.value) {\n            let thisValue = this._convert(this.value);\n            this._compareValues(item, itemValue, thisValue)\n        } else {\n            this.value = item;\n        }\n    }\n\n    toGraph(isRoot = true) {\n        let edges = this.parent ?\n            [\n                {\n                    from: this.parent.id,\n                    to: this.id\n                }\n            ] : [];\n        let nodes = this.value ?\n            [\n                {\n                    id: this.id,\n                    label: this.value,\n                    shape: isRoot? \"box\" : options.nodes.shape\n                }\n            ] : [];\n        if (this.left) {\n            let leftRes = this.left.toGraph(false);\n            edges = [...edges, ...leftRes.edges];\n            nodes = [...nodes, ...leftRes.nodes];\n        }\n        if (this.right) {\n            let rightRes = this.right.toGraph(false);\n            edges = [...edges, ...rightRes.edges];\n            nodes = [...nodes, ...rightRes.nodes];\n        }\n\n        return {\n            nodes,\n            edges\n        }\n    }\n\n}\n\nexport {Node as BinaryTree};\n","import React, {useState} from \"react\";\nimport Graph from \"react-graph-vis\";\nimport {InputForm} from \"./InputForm\";\nimport {BinaryTree} from \"../tree-lib/BinaryTree\";\n\n\nlet TreeGraph = (props) => {\n\n    const defaultTree = {\n        edges: [],\n        nodes: []\n    };\n\n    let [tree, setTree] = useState(new BinaryTree(null));\n\n    let [representation, setRepresentation] = useState({\n        edges: [],\n        nodes: []\n    });\n    let [network, setNetwork] = useState(null);\n\n    const update = (newVal) => {\n        setRepresentation(newVal);\n        if (network) {\n            network.setData(newVal)\n        }\n    };\n\n    const clear = () => {\n        update(defaultTree);\n        setTree(new BinaryTree(null));\n    };\n\n    return (\n        <div>\n            <InputForm update={update} tree={tree}/>\n            <button onClick={()=> {clear()}}>Clear tree</button>\n            <Graph\n                options={props.options}\n                updateTrigger={representation}\n                graph={{edges: [], nodes: []}}\n                getNetwork={network => {\n                    setNetwork(network)\n                }}/>\n        </div>\n    );\n};\n\n\n\nexport {TreeGraph}\n","import React from 'react';\nimport '../style/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {options} from '../config'\nimport {TreeGraph} from \"./TreeGraph\";\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction App() {\n\n    return (\n        <Container fluid={\"md\"}>\n            <Row>\n                <Col>\n                    <TreeGraph options={options}/>\n                </Col>\n\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}